
-- 이름(NAME), 나이(AGE), 성별(GENDER), 주소(ADDRESS), 전화번호(PHONE)
-- 시퀀스 생성
CREATE TABLE TBL_BUYER(
	ID NUMBER,
	BUYER_NAME VARCHAR2(255),
	BUYER_AGE NUMBER,
	BUYER_GENDER CHAR(5),
	BUYER_ADDRESS VARCHAR2(255),
	BUYER_PHONE VARCHAR2(255),
	CONSTRAINT PK_BUYER PRIMARY KEY(ID)
);

CREATE SEQUENCE BUYER_SEQ;


-- 브랜드(BRAND), 이름(NAME), 가격(PRICE), 재고(STOCK)
-- 시퀀스 생성
CREATE TABLE TBL_PRODUCT(
	ID NUMBER,
	PRODUCT_BRAND VARCHAR2(255) NOT NULL,
	PRODUCT_NAME VARCHAR2(255) NOT NULL,
	PRODUCT_PRICE NUMBER DEFAULT 0,
	PRODUCT_STOCK NUMBER DEFAULT 0,
	CONSTRAINT PK_PRODUCT PRIMARY KEY(ID)	
);

CREATE SEQUENCE PRODUCT_SEQ;

CREATE TABLE TBL_ORDER(
	ID NUMBER,
	BUYER_ID NUMBER,
	PRODUCT_ID NUMBER,
	CONSTRAINT PK_ORDER PRIMARY KEY(ID),
	CONSTRAINT FK_ORDER_BUYER FOREIGN KEY(BUYER_ID)
	REFERENCES TBL_BUYER(ID),
	CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
	REFERENCES TBL_PRODUCT(ID)
);

CREATE SEQUENCE ORDER_SEQ;

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '홍길동', 20, '남', '서울시 강남구', '01044872848');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '이순신', 30, '여', '경기도 성남시', '01022774425');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '김철수', 40, '남', '경기도 분당시', '01042244224');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '김영희', 20, '여', '경기도 수원시', '01025357112');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '이아영', 30, '여', '경기도 수원시', '01028377661');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '정유리', 10, '남', '서울시 강남구', '01047275922');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '최성진', 20, '남', '경기도 분당시', '01038453838');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '강민구', 30, '남', '서울시 강서구', '01024772321');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '조사랑', 20, '여', '경기도 분당시', '01045527711');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '김적자', 20, '남', '경기도 화성시', '01059107212');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '최도윤', 20, '남', '서울시 구로구', '01030204067');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '김펭수', 30, '남', '서울시 강남구', '01077775454');

INSERT INTO TBL_BUYER
VALUES(BUYER_SEQ.NEXTVAL, '김첨지', 40, '남', '경기도 화성시', '01033337777');

SELECT * FROM TBL_BUYER;


INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '나이키', '화이트신발', 139000, '50');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '로우클래식', '파란티셔츠', 59000, '100');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '노앙', '흰티셔츠', 89600, '20');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '미나수', '프린팅티셔츠', 31000, '30');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '스파오', '가디건', 17900, '200');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '디마프', '화장품', 66000, '100');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '팬디', '명품백', 2287630, '20');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '몽끌레어', '패딩', 1780680, '30');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '에뛰드', '화장품', 13300, '30');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '아디다스', '러닝화', 86700, '50');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '더엣지', '치마', 79900, '100');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '삼익가구', '화장대', 75000, '100');

INSERT INTO TBL_PRODUCT 
VALUES(PRODUCT_SEQ.NEXTVAL, '노스페이스', '바람막이', 69000, '200');

SELECT * FROM TBL_PRODUCT;

SELECT * FROM TBL_ORDER;

-- USER 13, PRODUCT 13

INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 1, 2);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 1, 10);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 1, 7);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 1, 5);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 1, 12);


INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 2, 7);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 2, 4);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 2, 1);

INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 3, 2);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 3, 3);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 3, 5);


INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 4, 7);

INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 5, 8);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 5, 2);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 5, 3);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 5, 6);



INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 6, 11);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 6, 7);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 6, 3);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 6, 13);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 6, 12);



INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 7, 2);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 7, 2);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 7, 4);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 8, 8);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 9, 6);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 9, 5);


INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 4);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 5);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 7);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 13);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 1);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 9);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 10, 8);



INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 11, 11);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 11, 10);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 11, 4);

INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 12, 10);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 12, 3);



INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 7);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 1);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 2);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 9);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 13);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 10);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 4);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 6);
INSERT INTO TBL_ORDER 
VALUES(ORDER_SEQ.NEXTVAL, 13, 3);

-- 30분
-- 20대가 가장 많이 구매한 상품의 이름 가져오기

-- ROWNUM 결과의 행의 개수를 들고온다.
SELECT * 
FROM (
	SELECT TBP.PRODUCT_NAME AS 상품명, COUNT(TBP.PRODUCT_NAME) AS 판매수, TBP.ID
	FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
	WHERE TBB.BUYER_AGE = 20
	GROUP BY TBP.PRODUCT_NAME, TBP.ID
	ORDER BY COUNT(TBP.PRODUCT_NAME) DESC
)
WHERE ROWNUM = 1;

-- 브랜드 중 몽끌레어를 구매한 30대 수
SELECT COUNT(TBB.ID) AS "30대가 구매한 수"
FROM
(
	SELECT * 
	FROM TBL_PRODUCT
	WHERE PRODUCT_BRAND = '몽끌레어'
) TBP
JOIN TBL_ORDER TBO 
ON TBO.PRODUCT_ID = TBP.ID
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID
WHERE BUYER_AGE = 30;


-- 10대가 구매하지 않은 상품의 브랜드 모두 가져오기
SELECT *
FROM TBL_PRODUCT
WHERE PRODUCT_BRAND NOT IN (
	SELECT PRODUCT_BRAND
	FROM (
		SELECT *
		FROM TBL_BUYER
		WHERE BUYER_AGE = 10
	) TBB
	JOIN TBL_ORDER TBO
	ON TBO.BUYER_ID = TBB.ID
	JOIN TBL_PRODUCT TBP 
	ON TBP.ID = TBO.PRODUCT_ID
);


-- 평균 판매된 개수보다 많이 팔린 상품 모두 가져오기 
SELECT TBP.PRODUCT_NAME AS "많이 팔린 상품", TBP.PRODUCT_PRICE AS "많이 팔린 가격" 
FROM (
	SELECT PRODUCT_ID, COUNT(PRODUCT_ID)
	FROM TBL_ORDER
	GROUP BY PRODUCT_ID
	HAVING COUNT(PRODUCT_ID) > (
		SELECT AVG(COUNT(PRODUCT_ID))
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
	)
) TBPR
JOIN TBL_PRODUCT TBP
ON TBP.ID = TBPR.PRODUCT_ID;

-- 평균값
SELECT AVG(COUNT(PRODUCT_ID))
FROM TBL_ORDER
GROUP BY PRODUCT_ID;

--1) 판매중인 상품의 평균 가격보다 낮은 상품을 가져오기

SELECT * 
FROM TBL_PRODUCT
WHERE PRODUCT_PRICE < (
	SELECT FLOOR(AVG(PRODUCT_PRICE))
	FROM TBL_PRODUCT
);

--2) 상품 중 가장 최저가 상 1개를 가져오기
SELECT * 
FROM (
	SELECT * 
	FROM TBL_PRODUCT
	ORDER BY PRODUCT_PRICE
)
WHERE ROWNUM = 1;

--3) 가장 적게 주문한 상품의 이름을 가져오기

SELECT PRODUCT_BRAND AS 브랜드
FROM (
	SELECT * 
	FROM (
		SELECT PRODUCT_ID, COUNT(PRODUCT_ID)
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
		ORDER BY COUNT(PRODUCT_ID)
	)
	WHERE ROWNUM = 1
) TBR
JOIN TBL_PRODUCT TBP
ON TBP.ID = TBR.PRODUCT_ID;

--4) 상품의 가격중 제일 비싼 상품 가져오기
SELECT * 
FROM (
	SELECT * 
	FROM TBL_PRODUCT
	ORDER BY PRODUCT_PRICE DESC
)
WHERE ROWNUM = 1;

--5) 상품의 재고가 제일 적은 상품 1개 가져오기
SELECT * 
FROM (
	SELECT * 
	FROM TBL_PRODUCT
	ORDER BY PRODUCT_STOCK
)
WHERE ROWNUM = 1;

--6) 상품의 평균 가격을 소수점 2자리로 가져오기
SELECT ROUND(AVG(PRODUCT_PRICE), 2)
FROM TBL_PRODUCT;

--7) 평균 주문개수 이상의 상품만 가져오기
SELECT AVG(COUNT(PRODUCT_ID))
FROM TBL_ORDER
GROUP BY PRODUCT_ID;

-- 서브쿼리
SELECT * 
FROM TBL_PRODUCT
WHERE ID IN (
	SELECT PRODUCT_ID 
	FROM TBL_ORDER
	GROUP BY PRODUCT_ID
	HAVING COUNT(PRODUCT_ID) > (
		SELECT AVG(COUNT(PRODUCT_ID))
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
	)
);

-- JOIN
SELECT * 
FROM (
	SELECT PRODUCT_ID 
	FROM TBL_ORDER
	GROUP BY PRODUCT_ID
	HAVING COUNT(PRODUCT_ID) > (
		SELECT AVG(COUNT(PRODUCT_ID))
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
	)
) TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID;















