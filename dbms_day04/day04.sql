-- 15분
-- 부모 테이블
-- ID, NAME, AGE, ADDRESS, PHONE, GENDER CHAR
-- GENDER '남', '여';

CREATE TABLE TBL_PARENT(
	ID NUMBER,
	PARENT_NAME VARCHAR2(255),
	PARENT_AGE NUMBER,
	PARENT_ADDRESS VARCHAR2(255),
	PARENT_PHONE VARCHAR2(255),
	PARENT_GENDER CHAR(5),
	CONSTRAINT PK_PARENT PRIMARY KEY(ID)
);

CREATE SEQUENCE PARENT_SEQ;

-- 데이터 4개 추가
-- 김철수, 홍길동, 장보고, 김영희
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '김철수', 20, '경기도 분당시', '010-0000-7777', '남');
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '김영희', 30, '서울시 중랑구', '010-2312-4754', '여');
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '홍길동', 15, '서울시 강남구', '010-8453-5547', '여');
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '장보고', 25, '경상도 대구시', '010-4851-7745', '남');

INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '박대기', 55, '경기도 분당시', '010-0000-7777', '남');
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '김럭키', 10, '서울시 강남구', '010-2312-4754', '남');
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '조잘용', 40, '서울시 종로구', '010-8453-5547', '여');
INSERT INTO TBL_PARENT
VALUES(PARENT_SEQ.NEXTVAL, '김뚜껑', 35, '경기도 구리시', '010-4851-7745', '여');

SELECT * FROM TBL_PARENT;

-- 수정
UPDATE TBL_PARENT 
SET PARENT_NAME = '김세환'
WHERE ID = 1;

-- 30분
-- 나이가 51세 이상인 부모의 이름만 조회
-- AS : ALIAS 별칭
-- '' : 값
-- "" : 문자열
SELECT PARENT_NAME AS "부모 이름" FROM TBL_PARENT
WHERE PARENT_AGE > 51;

-- 서울시에 살고 있는 부모들 모두 조회
SELECT * FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '서울%';

-- 나이가 30세 이하인 부모의 핸드폰만 조회
SELECT PARENT_PHONE FROM TBL_PARENT
WHERE PARENT_AGE <= 30;

-- 부모의 이름이 김으로 시작하는 부모의 이름 조회
SELECT * FROM TBL_PARENT
WHERE PARENT_NAME LIKE '김%';

-- 부모의 이름 "키"로 끝나는 이름 조회
SELECT PARENT_NAME AS "부모의 이름" FROM TBL_PARENT
WHERE PARENT_NAME LIKE '%키';

-- 김럭키의 나이를 30살로 변경
SELECT * FROM TBL_PARENT;
UPDATE TBL_PARENT 
SET PARENT_AGE = 30
WHERE ID = 6;

SELECT * FROM TBL_PARENT;
UPDATE TBL_PARENT 
SET PARENT_AGE = 10, PARENT_ADDRESS = '서울시 동작구'
WHERE ID = 6;

-- 김뚜껑의 이름을 왕뚜껑으로 변경
SELECT * FROM TBL_PARENT;
UPDATE TBL_PARENT 
SET PARENT_NAME = '왕뚜껑'
WHERE ID = 8;

-- 부모의 성별 중 '여'의 주소만 조회
SELECT PARENT_ADDRESS FROM TBL_PARENT
WHERE PARENT_GENDER = '여';

-- 서울에 살지 않는 학부모들 모두 조회
SELECT * FROM TBL_PARENT
WHERE PARENT_ADDRESS NOT LIKE '서울%';

-- 나이가 15살이상 40살이하인 부모 조회
SELECT * FROM TBL_PARENT 
WHERE PARENT_AGE >= 15 AND PARENT_AGE <= 40;

-- 조잘용 삭제
DELETE FROM TBL_PARENT
WHERE ID = 7;

SELECT * FROM TBL_PARENT;

-- 부모의 핸드폰 번호중 0이 들어간 부모 조회
SELECT * FROM TBL_PARENT
WHERE PARENT_PHONE LIKE '%0%';


-----------------------------------------------------
CREATE TABLE TBL_STORE(
	ID NUMBER,
	STORE_NAME VARCHAR2(255),
	STORE_PRICE NUMBER DEFAULT 0,
	STORE_STOCK NUMBER DEFAULT '0',
	CONSTRAINT PK_STORE PRIMARY KEY(ID)
);

-- 기존 컬럼에 PRIMARY KEY를 추가하고 삭제하는 방법
ALTER TABLE TBL_STORE DROP PRIMARY KEY;
ALTER TABLE TBL_STORE ADD PRIMARY KEY(ID);

SELECT * FROM TBL_STORE;

CREATE SEQUENCE STORE_SEQ;

INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '볼펜', 800, 20);
INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '지우개', 2000, 60);
INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '공책', 3000, 15);
INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '샤프', 1500, 50);
INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '도화지', 6000, 30);
INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '크레파스', 3000, 10);
INSERT INTO TBL_STORE
VALUES(STORE_SEQ.NEXTVAL, '물감', 8000, 15);

/*
	1) 평균 AVG()
	2) 최대값 MAX()
	3) 최소값 MIN()
	4) 총합 SUM()
	5) 개수 COUNT()
*/

SELECT * FROM TBL_STORE;
SELECT STORE_NAME, MAX(STORE_STOCK) FROM TBL_STORE;

SELECT CEIL(AVG(STORE_PRICE)) FROM TBL_STORE;
SELECT FLOOR(AVG(STORE_PRICE)) FROM TBL_STORE;

-- 소수점 자리를 표현하고 싶을 때 : ROUND(값, 자리수)
SELECT ROUND(AVG(STORE_PRICE), 3) FROM TBL_STORE;

----------------------------------------------------------

CREATE TABLE TBL_PRODUCT(
	ID NUMBER,
	PRODUCT_NAME VARCHAR2(255),
	PRODUCT_PRICE NUMBER DEFAULT 0,
	MEMBER_AGE NUMBER,
	CONSTRAINT PK_PRODUCT PRIMARY KEY(ID)
);

CREATE SEQUENCE PRODUCT_SEQ;

SELECT * FROM TBL_PRODUCT;

INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 10000, 20);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 30000, 10);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 40000, 30);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 10000, 10);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 20000, 40);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 40000, 20);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 10000, 20);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 10000, 40);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 40000, 30);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 20000, 20);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 20000, 20);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 30000, 10);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 10000, 30);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 40000, 30);
INSERT INTO TBL_PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '노트북', 10000, 20);

SELECT * FROM TBL_PRODUCT;

-- SELECT 절
-- WHERE 절
-- GROUP BY 절
-- HAVING 절
-- ORDER BY 절

SELECT MEMBER_AGE, COUNT(PRODUCT_NAME)
FROM TBL_PRODUCT
GROUP BY MEMBER_AGE
HAVING COUNT(MEMBER_AGE) > 3;

--연령대별 평균 구매가격
SELECT MEMBER_AGE AS 연령대, FLOOR(AVG(PRODUCT_PRICE)) AS 평균가격
FROM TBL_PRODUCT
GROUP BY MEMBER_AGE
ORDER BY MEMBER_AGE ASC;

-- 가격대별 멤버 수 내림차순 조회
-- 10분
SELECT PRODUCT_PRICE AS 가격대, COUNT(MEMBER_AGE) AS "멤버 수"
FROM TBL_PRODUCT 
GROUP BY PRODUCT_PRICE
HAVING PRODUCT_PRICE > 30000
ORDER BY PRODUCT_PRICE DESC;

-- 연령대별
-- 평균 가격 중 2만원 이상 상품의 연령대별, 멤버 수을 구하시오.
-- 연령대별을 기준으로 오름차순
-- 10분
SELECT MEMBER_AGE AS 연령대, COUNT(MEMBER_AGE) AS "멤버 수"
FROM TBL_PRODUCT 
GROUP BY MEMBER_AGE
HAVING AVG(PRODUCT_PRICE) >= 20000
ORDER BY MEMBER_AGE ASC;

-- 서브쿼리
-- 20대중에서 구매 노트북 가격이 2만원 이상인 ID
-- 조건 1) 20대인 사용자
-- 조건 2) 가격 2만원 이상



SELECT * 
FROM TBL_PRODUCT 
WHERE MEMBER_AGE = 20;
	
	
SELECT MA.ID
FROM (
	SELECT * 
	FROM TBL_PRODUCT 
	WHERE MEMBER_AGE = 20
) MA
WHERE PRODUCT_PRICE >= 20000;

-- 서브쿼리의 위치
-- SELECT, FROM, WHERE
-- 상품 가격이 20000원이 넘는 상품의 나이대 조회 후 결과로 ID를 조회
SELECT ID
FROM TBL_PRODUCT
WHERE MEMBER_AGE IN (
	SELECT MEMBER_AGE
	FROM TBL_PRODUCT
	WHERE PRODUCT_PRICE > 20000
);

--SELECT *
--FROM TBL_PRODUCT 
--WHERE MEMBER_AGE IN (10);

SELECT P.*, (
	SELECT AVG(PRODUCT_PRICE)
	FROM TBL_PRODUCT
) AS 평균가격
FROM TBL_PRODUCT P;

CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER,
	FIELD_TRIP_TITLE VARCHAR2(255),
	FIELD_TRIP_CONTENT VARCHAR2(255),
	FIELD_TRIP_NUMBER NUMBER,
	CONSTRAINT PK_FIELD_TRIP PRIMARY KEY(ID)
);

CREATE SEQUENCE FIELD_TRIP_SEQ;

SELECT * FROM TBL_FIELD_TRIP;

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '어서와요 매미농장', '매미잡자 영차~!', 20);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '아이스크림 빨리먹기', '누가 머리 안아픈가~', 100);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '고구마 캐기', '왜 내 고구마는 작은가', 80);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '빙어 얼음 낚시', '나 빼고 다 잡는 빙어낚시', 40);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '치즈 제작하기', '여기서 우리집까지 늘어나는 치즈', 5);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '도자기 만들기', '내가 만드는 도자기 무늬', 60);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '동물 타보자', '이리야~!', 10);

INSERT INTO TBL_FIELD_TRIP
VALUES(FIELD_TRIP_SEQ.NEXTVAL, '포도주 만들기', '내가 만든건 엄마가 먹는 포도주 만들기!', 60);

SELECT * FROM TBL_FIELD_TRIP;

-- 참가수가 60이상이면서, 고구마가 들어가는 ID 값 조회
-- 단, 서브쿼리를 이용한다.

SELECT FT.ID, ID
FROM (
	SELECT *
	FROM TBL_FIELD_TRIP 
	WHERE FIELD_TRIP_NUMBER >= 60
) FT
WHERE FIELD_TRIP_TITLE LIKE '%고구마%';

-- 참가자 수가 평균 이상인 체험 학습를 구하고, 제목과 참가수, 평균 값을 조회하기
-- 서브쿼리로 이용한다.
-- 15분

SELECT FIELD_TRIP_TITLE AS 제목, FIELD_TRIP_CONTENT AS 컨텐츠, CEIL((
	SELECT AVG(FIELD_TRIP_NUMBER)
	FROM TBL_FIELD_TRIP
)) AS "평균 값"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_NUMBER > (
	SELECT AVG(FIELD_TRIP_NUMBER)
	FROM TBL_FIELD_TRIP
);

-- 17분
-- 체험학습의 총 개수보다 참가자수가 낮은 체험학습의
-- 제목과 컨텐츠, 제일 큰 참가자 수 조회
-- 단 서브쿼리를 이용한다.

SELECT FIELD_TRIP_TITLE AS 제목, FIELD_TRIP_CONTENT AS 컨텐츠, (
		SELECT MAX(FIELD_TRIP_NUMBER)
		FROM TBL_FIELD_TRIP
	) AS "제일 많은 참가자 수"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_NUMBER < (
	SELECT COUNT(ID)
	FROM TBL_FIELD_TRIP
);

-- 20분
-- 컨텐츠에 '내'가 들어간 체험학습의 참가자수 평균보다 큰
-- 체험학습의 아이디, 제목, 컨텐츠, 개수를 조회
-- 아이디를 기준으로 내림차순


SELECT ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, (
	SELECT COUNT(FIELD_TRIP_NUMBER)
	FROM TBL_FIELD_TRIP
	WHERE ID IN (2, 3)
)
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_NUMBER > (
	SELECT AVG(FIELD_TRIP_NUMBER)
	FROM TBL_FIELD_TRIP
	WHERE FIELD_TRIP_CONTENT LIKE '%내%'
);


SELECT *
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_NUMBER > (
	SELECT AVG(FIELD_TRIP_NUMBER)
	FROM TBL_FIELD_TRIP
	WHERE FIELD_TRIP_CONTENT LIKE '%내%'
);

--'기'로 끝나는 제목의 참가인원 평균보다 작은 체험학습 중
--'요'가 들어가는 제목의 참가자 수와 모든 컨텐츠의 평균 참가자 수 조회
-- 25분

SELECT FIELD_TRIP_NUMBER AS "검색필드의 평균", ROUND((
	SELECT AVG(FIELD_TRIP_NUMBER)
	FROM TBL_FIELD_TRIP
), 2) AS "전체 평균"
FROM (
	SELECT *
	FROM TBL_FIELD_TRIP
	WHERE FIELD_TRIP_NUMBER < (
		SELECT AVG(FIELD_TRIP_NUMBER)
		FROM TBL_FIELD_TRIP
		WHERE FIELD_TRIP_TITLE LIKE '%기'
	)
)
WHERE FIELD_TRIP_TITLE LIKE '%요%';


/*
	SQL문의 실행 순서 
	FROM > JOIN > ON > WHERE > GROUP BY > HAVING > SELECT > ORDER BY
*/




























